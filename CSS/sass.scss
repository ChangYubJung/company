@use 'reset'; /*다른파일에 있는 내용 가져오고 싶을 땐 @use '파일경로';
css 기본 문번에도 @import 문법이 있다.*/

// scss -> css 변환해야 브라우저가 해석 가능함(사용 가능함)

// 1. 어려운 단어 기억해야할 땐 변수문법 쓰자. $변수명 : 저장해서쓸값;
// 규칙적인 스타일만들 때도 변수가 도움이됩니다. Sass에선 사칙연산 바로가능(같은 단위끼리!)
// *, / 은 정수로

/* nesting 문법 - 관련있는 class들 묶을 때 좋음. (두개 이상 중첩 하지말자.)
.main-bg h4 {} 을 밑에 형식으로 사용.*/
.main-bg {
    h4 {
        font-size:5px;
    }
}

/* @extend 문법(class 전체를 복사해주는 문법)*/
// %는 임시클래스(단독으로 컴파일안됨. 컴파일 하고싶으면? %대신 '.' 쓰면됨)
%btn {
    width: 100px;
    height: 100px;
    padding: 20px;
}
//@extend 문법 숙제. 
%div-main {
    width: 200px;
    height: 200px;
    padding: 20px;
}
.div-red{
    @extend %div-main;
    background-color: red;
}
.div-blue{
    @extend %div-main;
    background-color: blue;
}
.div-green{
    @extend %div-main;
    background-color: green;
}

.btn-green {
    @extend %btn;
    color: green;
}

$메인칼라 : #2a4cb2;
.box {
    width: 100%;
    background-color: $메인칼라;
}

/*@mixin 문법(긴 코드를 짧은 단어로 축약할 때 씀)
$파라미터는 긴 코드를 가변적으로 만들 때 씀.*/
@mixin 폰트스타일($구멍, $구멍2, $구멍3) {
    font-size: $구멍;
    letter-spacing: -1px;
    color: reset.$메인칼라; /*다른파일의 $변수를 쓰려면 '파일이름.$변수
    다른파일의 @mixin 쓰려면 @include 파일명.mixin이름*/
    #{ $구멍3 }: -1px;
}
h2 {
    @include 폰트스타일(30px, 1px, width);
}
h3 {
    @include 폰트스타일(20px, 2px);
}
h4 {
    @include 폰트스타일(10px, 3px);
}